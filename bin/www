#!/usr/bin/env node
require('../utils/log.utlis')

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('cyberapi:server');
const http = require('http');
const fs = require('fs')
const log = require('log-beautify');
const https = require("https");

let key
let cert

/**
 * On load les fichiers de permissions
 */
try {
  key = fs.readFileSync(process.env.KEY);
  cert = fs.readFileSync(process.env.CERT);
} catch (e) {
  log.error(e)
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || process.env.HTTPPORT);
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Create HTTPS server
 * @type {Server}
 */
const httpsServer = https.createServer({key: key, cert: cert}, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(process.env.HTTP_PORT, function () {
  log.success('HTTP server started')
});
server.on('error', onError);
server.on('listening', onListening);

httpsServer.listen(process.env.HTTPS_PORT, function () {
  log.success('HTTPS server started')
});
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
